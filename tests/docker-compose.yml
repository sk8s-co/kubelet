x-kubelet: &kubelet
  build:
    context: ..
    args:
      - KUBE_VERSION=${KUBE_VERSION:-v1.33.4}
      - GO_VERSION=${GO_VERSION_KUBE:-1.24}
  depends_on:
    etcd:
      condition: service_healthy
    kubeconfig:
      condition: service_completed_successfully
  privileged: true
  networks:
    - apiserver
    - kubelet
  tmpfs:
    - /run
    - /var/run
  volumes:
    - config:/config
    - certs:/certs
    - data:/data
    - cgroup:/sys/fs/cgroup:rw
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:10248/healthz"]
    interval: 1s
    timeout: 1s
    retries: 5
    start_period: 1s

services:
  certs:
    image: alpine/openssl:latest
    volumes:
      - certs:/certs
    command: >
      req -x509 -newkey rsa:4096 -nodes 
        -keyout /certs/localhost.key 
        -out /certs/localhost.crt 
        -days 365 
        -subj '/CN=localhost' 
        -addext 'subjectAltName=IP:127.0.0.1,DNS:localhost,DNS:host.docker.internal,DNS:etcd,DNS:kube-apiserver'
    restart: no

  kubeconfig:
    image: bitnami/kubectl:latest
    user: root
    volumes:
      - certs:/certs:ro
      - config:/config
      - .:/tests
    depends_on:
      certs:
        condition: service_completed_successfully
    entrypoint: []
    command:
      - /bin/bash
      - -c
      - |
        # local-cluster for inside docker
        kubectl config set-cluster internal --server=https://kube-apiserver:6443 --certificate-authority=/certs/localhost.crt --kubeconfig=/config/kubeconfig --embed-certs=true &&
        kubectl config set-credentials internal --client-certificate=/certs/localhost.crt --client-key=/certs/localhost.key --kubeconfig=/config/kubeconfig --embed-certs=true &&
        kubectl config set-context internal --cluster=internal --user=internal --kubeconfig=/config/kubeconfig &&
        kubectl config use-context internal --kubeconfig=/config/kubeconfig &&
        # host-cluster for access from host machine
        rm -f /tests/kubeconfig && \
        kubectl config set-cluster sk8s --server=https://localhost:65443 --certificate-authority=/certs/localhost.crt --kubeconfig=/tests/kubeconfig --embed-certs=true
        kubectl config set-credentials sk8s --client-certificate=/certs/localhost.crt --client-key=/certs/localhost.key --kubeconfig=/tests/kubeconfig --embed-certs=true &&
        kubectl config set-context sk8s --cluster=sk8s --user=sk8s --kubeconfig=/tests/kubeconfig &&
        kubectl config use-context sk8s --kubeconfig=/tests/kubeconfig
        chmod ugo+r /tests/kubeconfig
    restart: no

  ddb:
    image: amazon/dynamodb-local:2.6.1
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /data"
    user: root
    networks:
      - etcd
    ports:
      - "8000:8000"
    volumes:
      - data:/data

  etcd:
    image: ${ETCD_IMAGE:-gcr.io/etcd-development/etcd}:${ETCD_VERSION:-v3.6.4}
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=DUMMYIDEXAMPLE
      - AWS_SECRET_ACCESS_KEY=DUMMYEXAMPLEKEY
      - AWS_ENDPOINT_URL_DYNAMODB=http://ddb:8000
      - AWS_ENDPOINT_URL_DYNAMODB_STREAMS=http://ddb:8000
      - SETCD_VERBOSE=true
    tmpfs:
      - /etcd
    networks:
      - etcd
    volumes:
      - certs:/certs
      - data:/data
    depends_on:
      certs:
        condition: service_completed_successfully
    command: >
      /usr/local/bin/etcd
      --name=etcd0
      --data-dir=/data/etcd
      --cert-file=/certs/localhost.crt
      --key-file=/certs/localhost.key
      --client-cert-file=/certs/localhost.crt
      --client-key-file=/certs/localhost.key
      --trusted-ca-file=/certs/localhost.crt
      --client-cert-auth=true
      --listen-client-urls=https://0.0.0.0:2379
      --advertise-client-urls=https://etcd:2379
    healthcheck:
      test: ["CMD", 
        "etcdctl", 
        "--endpoints=https://etcd:2379", 
        "--cert=/certs/localhost.crt",
        "--key=/certs/localhost.key",
        "--cacert=/certs/localhost.crt",
        "endpoint", "health"
      ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  kube-apiserver:
    image: registry.k8s.io/kube-apiserver:${KUBE_VERSION:-v1.33.4}
    depends_on:
      etcd:
        condition: service_healthy
      kubeconfig:
        condition: service_completed_successfully
    networks:
      - apiserver
      - etcd
    ports:
      - "65443:6443"
    volumes:
      - certs:/certs
    command:
      - /usr/local/bin/kube-apiserver
      - --advertise-address=0.0.0.0
      - --disable-http2-serving
      - --etcd-servers=https://etcd:2379
      - --etcd-keyfile=/certs/localhost.key
      - --etcd-certfile=/certs/localhost.crt
      - --etcd-cafile=/certs/localhost.crt
      - --tls-cert-file=/certs/localhost.crt
      - --tls-private-key-file=/certs/localhost.key
      - --client-ca-file=/certs/localhost.crt
      - --service-account-key-file=/certs/localhost.crt
      - --service-account-signing-key-file=/certs/localhost.key
      - --service-account-issuer=https://kubernetes.default.svc.cluster.local
      - --allow-privileged=true
      - --endpoint-reconciler-type=none # TODO: research
      - --feature-gates=APIServerIdentity=false # TODO: research
      - --authorization-mode=AlwaysAllow # TODO: fix
      - --service-cluster-ip-range=10.96.0.0/16 # TODO: research
      - --kubelet-client-certificate=/certs/localhost.crt
      - --kubelet-client-key=/certs/localhost.key
      - --default-not-ready-toleration-seconds=10
      - --default-unreachable-toleration-seconds=10
      - --v=4
  kube-controller-manager:
    image: registry.k8s.io/kube-controller-manager:${KUBE_VERSION:-v1.33.4}
    depends_on:
      etcd:
        condition: service_healthy
      kubeconfig:
        condition: service_completed_successfully
    networks:
      - apiserver
    volumes:
      - certs:/certs
      - config:/config
    command:
      - /usr/local/bin/kube-controller-manager
      - --kubeconfig=/config/kubeconfig
      - --service-account-private-key-file=/certs/localhost.key
      - --root-ca-file=/certs/localhost.crt
      - --cluster-signing-cert-file=/certs/localhost.crt
      - --cluster-signing-key-file=/certs/localhost.key
      - --cluster-cidr=10.244.0.0/16 # TODO: research
      - --leader-elect=false
      - --node-monitor-period=2s
      - --node-monitor-grace-period=15s
      - --node-eviction-rate=10
      - --secondary-node-eviction-rate=10
      - --v=4
  kube-scheduler:
    image: registry.k8s.io/kube-scheduler:${KUBE_VERSION:-v1.33.4}
    depends_on:
      etcd:
        condition: service_healthy
      kubeconfig:
        condition: service_completed_successfully
    networks:
      - apiserver
    volumes:
      - certs:/certs
      - config:/config
    command:
      - /usr/local/bin/kube-scheduler
      - --kubeconfig=/config/kubeconfig
      - --leader-elect=false
      - --v=4

  kubelet:
    <<: *kubelet
    hostname: kubelet

# kubelet-2:
#   <<: *kubelet
#   hostname: kubelet-2

networks:
  etcd:
    driver: bridge
  apiserver:
    driver: bridge
  kubelet:
    driver: bridge

volumes:
  data: {}
  certs: {}
  config: {}
  cgroup: 
    driver_opts:
      type: cgroup2
      device: cgroup2
      o: rw,nosuid,nodev,noexec,relatime